import requests
import time
import json
import os
import paramiko
from datetime import datetime
from netmiko import ConnectHandler
import ftplib
import re

# –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é
CONFIG_FILE = './config.json'
CHAT_IDS_FILE = './chat_ids.json'
BACKUP_DIR = './BackUp/'

with open(CONFIG_FILE, 'r') as f:
    config = json.load(f)

TELEGRAM_BOT_TOKEN = config['telegram_token']

def load_chat_ids():
    try:
        with open(CHAT_IDS_FILE, 'r') as file:
            return json.load(file)
    except FileNotFoundError:
        return []

def send_telegram_message(message):
    chat_ids = load_chat_ids()
    if not chat_ids:
        print("–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∂–æ–¥–Ω–æ–≥–æ chat_id –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.")
        return

    url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
    for chat_id in chat_ids:
        print(f"–í—ñ–¥–ø—Ä–∞–≤–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–æ —á–∞—Ç—É: {chat_id}")
        message = message.replace('*', '')  # –ü—Ä–∏–±—Ä–∞—Ç–∏ –∂–∏—Ä–Ω–∏–π —à—Ä–∏—Ñ—Ç
        message = message.replace('_', '')  # –ü—Ä–∏–±—Ä–∞—Ç–∏ –∫—É—Ä—Å–∏–≤
        response = requests.get(url, params={'chat_id': chat_id, 'text': message.strip()})
        print(f"Telegram API –≤—ñ–¥–ø–æ–≤—ñ–¥—å: {response.status_code}, {response.text}")

def create_backup(mikrotik):
    try:
        backup_name = f"{mikrotik['name']}-Backup-{datetime.now().strftime('%Y%m%d-%H%M')}"
        device = {
            "device_type": "mikrotik_routeros",
            "host": mikrotik['host'],
            "username": mikrotik['user'],
            "password": mikrotik['password'],
        }

        print(f"–ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ {mikrotik['host']}...")  # –õ–æ–≥—É–≤–∞–Ω–Ω—è –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è
        with ConnectHandler(**device) as ssh_conn:
            print(f"–ü—ñ–¥–∫–ª—é—á–µ–Ω–æ –¥–æ {mikrotik['host']}. –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –±–µ–∫–∞–ø—É...")  # –õ–æ–≥—É–≤–∞–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ–≥–æ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è
            ssh_conn.send_command(f'/system backup save name={backup_name}')
            time.sleep(3)
            ssh_conn.send_command(f'/export file={backup_name}')
            time.sleep(1)
        return backup_name
    except Exception as e:
        error_message = f"–ü–æ–º–∏–ª–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó –Ω–∞ #{mikrotik['name']} ({mikrotik['host']}): {e}"
        print(error_message)  # –õ–æ–≥—É–≤–∞–Ω–Ω—è –ø–æ–º–∏–ª–∫–∏
        send_telegram_message(error_message)
        return None

def download_backup(mikrotik, backup_name):
    try:
        # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –æ—Å–Ω–æ–≤–Ω–æ—ó –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó —Ç–∞ –ø–∞–ø–∫–∏ –∑ —ñ–º'—è–º –º—ñ–∫—Ä–æ—Ç–∏–∫–∞
        mikrotik_dir = os.path.join(BACKUP_DIR, mikrotik['name'])
        os.makedirs(mikrotik_dir, exist_ok=True)

        # –õ–æ–∫–∞–ª—å–Ω—ñ —à–ª—è—Ö–∏ –¥–ª—è —Ñ–∞–π–ª—ñ–≤ .backup —ñ .rsc
        local_backup = os.path.join(mikrotik_dir, f"{backup_name}.backup")
        local_rsc = os.path.join(mikrotik_dir, f"{backup_name}.rsc")

        print(f"–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –±–µ–∫–∞–ø—É –∑ {mikrotik['host']}...")  # –õ–æ–≥—É–≤–∞–Ω–Ω—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
        ssh = paramiko.SSHClient()
        ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
        ssh.connect(mikrotik['host'], username=mikrotik['user'], password=mikrotik['password'])

        sftp = ssh.open_sftp()
        sftp.get(f"/{backup_name}.backup", local_backup)
        time.sleep(3)
        sftp.get(f"/{backup_name}.rsc", local_rsc)
        time.sleep(1)
        sftp.close()
        ssh.close()

        return local_backup, local_rsc
    except Exception as e:
        error_message = f"–ü–æ–º–∏–ª–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó –∞–±–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –Ω–∞ #{mikrotik['name']} ({mikrotik['host']}): {e}"
        print(error_message)  # –õ–æ–≥—É–≤–∞–Ω–Ω—è –ø–æ–º–∏–ª–∫–∏
        send_telegram_message(error_message)
        return None, None


def upload_backup_to_ftp(local_file, backup_name, ftp_config, file_type='backup'):
    try:
        print(f"–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –Ω–∞ FTP {backup_name}...")  # –õ–æ–≥—É–≤–∞–Ω–Ω—è FTP
        ftp = ftplib.FTP(ftp_config['host'])
        ftp.login(ftp_config['user'], ftp_config['password'])
        remote_dir = f"{ftp_config['dir']}/{backup_name.split('-')[0]}"

        try:
            ftp.mkd(remote_dir)
        except ftplib.error_perm:
            pass  # –ü–∞–ø–∫–∞ –≤–∂–µ —ñ—Å–Ω—É—î

        remote_file = f"{remote_dir}/{backup_name}.{file_type}"
        with open(local_file, 'rb') as file:
            ftp.storbinary(f"STOR {remote_file}", file)

        ftp.quit()
        return True
    except Exception as e:
        error_message = f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –Ω–∞ FTP {backup_name}: {e}"
        print(error_message)  # –õ–æ–≥—É–≤–∞–Ω–Ω—è –ø–æ–º–∏–ª–∫–∏
        send_telegram_message(error_message)
        return False

def delete_old_backups(mikrotik, keep_count=2):
    try:
        device = {
            "device_type": "mikrotik_routeros",
            "host": mikrotik['host'],
            "username": mikrotik['user'],
            "password": mikrotik['password'],
        }

        with ConnectHandler(**device) as ssh_conn:
            backups = ssh_conn.send_command('/file print')

            # –õ–æ–≥—É—î–º–æ –≤—Ö—ñ–¥–Ω–∏–π —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª—ñ–≤
            print(f"üìú –û—Ç—Ä–∏–º–∞–Ω–∏–π —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª—ñ–≤:\n{backups}")

            backup_files = []
            for line in backups.splitlines():
                match = re.search(r'(\S+\.backup|\S+\.rsc)', line)  # –ó–Ω–∞—Ö–æ–¥–∏–º–æ —Ñ–∞–π–ª–∏ –∑ —Ä–æ–∑—à–∏—Ä–µ–Ω–Ω—è–º–∏
                if match:
                    backup_files.append(match.group(1))

            print(f"üìÇ –í–∏–±—Ä–∞–Ω—ñ —Ñ–∞–π–ª–∏ –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É: {backup_files}")

            if not backup_files:
                print(f"‚ö† –ù–∞ {mikrotik['name']} –Ω–µ–º–∞—î —Ñ–∞–π–ª—ñ–≤ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è.")
                return False

            # –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤–∏—Ç—è–≥—É–≤–∞–Ω–Ω—è –¥–∞—Ç–∏
            def extract_datetime(file_name):
                match = re.search(r'(\d{8}-\d{4})', file_name)  # YYYYMMDD-HHMM
                if match:
                    try:
                        dt = datetime.strptime(match.group(1), "%Y%m%d-%H%M")
                        return dt
                    except ValueError:
                        print(f"‚ö† –ü–æ–º–∏–ª–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥—É –¥–∞—Ç–∏ —É —Ñ–∞–π–ª—ñ: {file_name}")
                        return None
                print(f"‚ö† –î–∞—Ç–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞ —É —Ñ–∞–π–ª—ñ: {file_name}")
                return None

            # –§–æ—Ä–º—É—î–º–æ —Å–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂—ñ–≤ (—ñ–º'—è —Ñ–∞–π–ª—É, –¥–∞—Ç–∞)
            backup_files_with_dates = [(file, extract_datetime(file)) for file in backup_files]

            # –í–∏–¥–∞–ª—è—î–º–æ —Ñ–∞–π–ª–∏, —É —è–∫–∏—Ö –Ω–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–∞—Ç—É
            backup_files_with_dates = [item for item in backup_files_with_dates if item[1] is not None]

            if not backup_files_with_dates:
                print(f"‚ö† –ñ–æ–¥–µ–Ω —Ñ–∞–π–ª –Ω–µ –º–∞—î –ø—Ä–∞–≤–∏–ª—å–Ω–æ—ó –¥–∞—Ç–∏! –ü–µ—Ä–µ–≤—ñ—Ä —Ä–µ–≥—É–ª—è—Ä–Ω–∏–π –≤–∏—Ä–∞–∑.")
                return False

            # –°–æ—Ä—Ç—É—î–º–æ –∑–∞ –¥–∞—Ç–æ—é
            backup_files_with_dates.sort(key=lambda x: x[1])

            # –õ–æ–≥—É—î–º–æ –≤—ñ–¥—Å–æ—Ä—Ç–æ–≤–∞–Ω–∏–π —Å–ø–∏—Å–æ–∫
            sorted_files = "\n".join(f"{file} ({date})" for file, date in backup_files_with_dates)
            print(f"üìÇ –í—ñ–¥—Å–æ—Ä—Ç–æ–≤–∞–Ω–∏–π —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª—ñ–≤ –Ω–∞ {mikrotik['name']}:\n{sorted_files}")

            # –í–∏–∑–Ω–∞—á–∞—î–º–æ —Ñ–∞–π–ª–∏ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è (–∑–∞–ª–∏—à–∞—î–º–æ keep_count –Ω–∞–π–Ω–æ–≤—ñ—à–∏—Ö)
            files_to_delete = backup_files_with_dates[:-keep_count]

            if not files_to_delete:
                print(f"‚úÖ –ù–∞ {mikrotik['name']} –Ω–µ–º–∞—î —Ñ–∞–π–ª—ñ–≤ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è.")
                return False

            for file, date in files_to_delete:
                print(f"‚ùå –í–∏–¥–∞–ª—è—î–º–æ —Ñ–∞–π–ª: {file} ({date})")
                ssh_conn.send_command(f'/file remove "{file}"')

            return True
    except Exception as e:
        error_message = f"–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –±–µ–∫–∞–ø—ñ–≤ –Ω–∞ {mikrotik['name']} ({mikrotik['host']}): {e}"
        print(error_message)
        return False


def attempt_connection(mikrotik, max_retries=3):
    for attempt in range(1, max_retries + 1):
        try:
            device = {
                "device_type": "mikrotik_routeros",
                "host": mikrotik['host'],
                "username": mikrotik['user'],
                "password": mikrotik['password'],
            }

            with ConnectHandler(**device) as ssh_conn:
                print(f"–ü—ñ–¥–∫–ª—é—á–µ–Ω–æ –¥–æ {mikrotik['host']}")
                return True
        except Exception as e:
            print(f"–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ {mikrotik['host']} (—Å–ø—Ä–æ–±–∞ {attempt}): {e}")
            if attempt < max_retries:
                print("–ó–∞—á–µ–∫–∞–π—Ç–µ 3 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ—é —Å–ø—Ä–æ–±–æ—é...")
                time.sleep(3)

    return False

def check_and_update_mikrotik(mikrotik):
        try:
            device = {
                "device_type": "mikrotik_routeros",
                "host": mikrotik['host'],
                "username": mikrotik['user'],
                "password": mikrotik['password'],
            }

            with ConnectHandler(**device) as ssh_conn:
                output = ssh_conn.send_command('/system package update check-for-updates')
                installed_version = next(
                    (line.split(':')[1].strip() for line in output.splitlines() if "installed-version" in line), None)
                latest_version = next(
                    (line.split(':')[1].strip() for line in output.splitlines() if "latest-version" in line), None)
                if installed_version and latest_version:
                    if tuple(map(int, installed_version.split('.'))) < tuple(map(int, latest_version.split('.'))):
                        ssh_conn.send_command('/system package update install')
                        return f"–û–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–ª—è MikroTik *#{mikrotik['name']}* –∑–∞–≤–µ—Ä—à–µ–Ω–æ."
                    else:
                        return f"MikroTik *#{mikrotik['name']}* –º–∞—î –∞–∫—Ç—É–∞–ª—å–Ω—É –≤–µ—Ä—Å—ñ—é."
        except Exception as e:
            send_telegram_message(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ #{mikrotik['name']}: {e}")
            return f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ #{mikrotik['name']}."

if __name__ == "__main__":
    send_telegram_message(f"üîπ –†–æ–∑–ø–æ—á–∞—Ç–æ –ø–ª–∞–Ω–æ–≤—ñ –±–µ–∫–∞–ø–∏! ({datetime.now().strftime('%Y-%m-%d %H:%M')})")

    failed_mikrotiks = []

    for idx, mikrotik in enumerate(config['mikrotiks'], start=1):
        if attempt_connection(mikrotik):  # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è
            backup_name = create_backup(mikrotik)
            if backup_name:
                local_backup, local_rsc = download_backup(mikrotik, backup_name)
                if local_backup and local_rsc:
                    upload_backup_to_ftp(local_backup, backup_name, config['ftp'], 'backup')
                    upload_backup_to_ftp(local_rsc, backup_name, config['ftp'], 'rsc')
                    delete_old_backups(mikrotik)

                update_message = check_and_update_mikrotik(mikrotik)

                send_telegram_message(f"üîπ #{idx} *#{mikrotik['name']}* ({mikrotik['host']}):\n"
                                      f"‚úÖ –ë–µ–∫–∞–ø —ñ RSC –¥–ª—è #{mikrotik['name']} —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ —Ç–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ.\n"
                                      f"–ù–∞–∑–≤–∞ —Ñ–∞–π–ª—ñ–≤: \n*{backup_name}.backup*,\n*{backup_name}.rsc*\n"
                                      f"{update_message}")
        else:
            failed_mikrotiks.append(mikrotik)
        time.sleep(5)

    # –ü–æ–≤—Ç–æ—Ä–Ω–∞ —Å–ø—Ä–æ–±–∞ –¥–ª—è —Ç–∏—Ö, —Ö—Ç–æ –Ω–µ –ø—ñ–¥–∫–ª—é—á–∏–≤—Å—è
    if failed_mikrotiks:
        send_telegram_message(f"üî¥ –ü–æ–≤—Ç–æ—Ä–Ω—ñ —Å–ø—Ä–æ–±–∏ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ MikroTik, —è–∫—ñ –Ω–µ –≤–¥–∞–ª–∏—Å—è:")
        for mikrotik in failed_mikrotiks:
            send_telegram_message(f"–ü–æ–≤—Ç–æ—Ä–Ω–∞ —Å–ø—Ä–æ–±–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ {mikrotik['host']}...")
            if attempt_connection(mikrotik):
                send_telegram_message(f"‚úÖ –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ {mikrotik['host']} –≤–¥–∞–ª–æ—Å—è –ø—ñ—Å–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ—ó —Å–ø—Ä–æ–±–∏.")
            else:
                send_telegram_message(f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –ø—ñ–¥–∫–ª—é—á–∏—Ç–∏—Å—å –¥–æ {mikrotik['host']} –ø—ñ—Å–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ—ó —Å–ø—Ä–æ–±–∏.")

    send_telegram_message(f"‚úÖ –ó–∞–≤–¥–∞–Ω–Ω—è –≤–∏–∫–æ–Ω–∞–Ω–æ! ({datetime.now().strftime('%Y-%m-%d %H:%M')})")
