import requests
import time
import json
from datetime import datetime
from netmiko import ConnectHandler


# –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é
CONFIG_FILE = './config.json'
CHAT_IDS_FILE = './chat_ids.json'
BACKUP_DIR = './BackUp/'

with open(CONFIG_FILE, 'r') as f:
    config = json.load(f)

TELEGRAM_BOT_TOKEN = config['telegram_token']

def load_chat_ids():
    try:
        with open(CHAT_IDS_FILE, 'r') as file:
            return json.load(file)
    except FileNotFoundError:
        return []

def send_telegram_message(message):
    chat_ids = load_chat_ids()
    if not chat_ids:
        print("–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∂–æ–¥–Ω–æ–≥–æ chat_id –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.")
        return

    url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
    for chat_id in chat_ids:
        print(f"–í—ñ–¥–ø—Ä–∞–≤–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–æ —á–∞—Ç—É: {chat_id}")
        message = message.replace('*', '')  # –ü—Ä–∏–±—Ä–∞—Ç–∏ –∂–∏—Ä–Ω–∏–π —à—Ä–∏—Ñ—Ç
        message = message.replace('_', '')  # –ü—Ä–∏–±—Ä–∞—Ç–∏ –∫—É—Ä—Å–∏–≤
        response = requests.get(url, params={'chat_id': chat_id, 'text': message.strip()})
        print(f"Telegram API –≤—ñ–¥–ø–æ–≤—ñ–¥—å: {response.status_code}, {response.text}")


def attempt_connection(mikrotik, max_retries=3):
    for attempt in range(1, max_retries + 1):
        try:
            device = {
                "device_type": "mikrotik_routeros",
                "host": mikrotik['host'],
                "username": mikrotik['user'],
                "password": mikrotik['password'],
            }

            with ConnectHandler(**device) as ssh_conn:
                print(f"–ü—ñ–¥–∫–ª—é—á–µ–Ω–æ –¥–æ {mikrotik['host']}")
                return True
        except Exception as e:
            print(f"–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ {mikrotik['host']} (—Å–ø—Ä–æ–±–∞ {attempt}): {e}")
            if attempt < max_retries:
                print("–ó–∞—á–µ–∫–∞–π—Ç–µ 3 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ—é —Å–ø—Ä–æ–±–æ—é...")
                time.sleep(3)

    return False

def check_and_update_mikrotik(mikrotik):
        try:
            device = {
                "device_type": "mikrotik_routeros",
                "host": mikrotik['host'],
                "username": mikrotik['user'],
                "password": mikrotik['password'],
            }

            with ConnectHandler(**device) as ssh_conn:
                output = ssh_conn.send_command('/system package update check-for-updates')
                installed_version = next(
                    (line.split(':')[1].strip() for line in output.splitlines() if "installed-version" in line), None)
                latest_version = next(
                    (line.split(':')[1].strip() for line in output.splitlines() if "latest-version" in line), None)
                if installed_version and latest_version:
                    if tuple(map(int, installed_version.split('.'))) < tuple(map(int, latest_version.split('.'))):
                        ssh_conn.send_command('/system package update install')
                        return f"–û–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–ª—è MikroTik *#{mikrotik['name']}* –∑–∞–≤–µ—Ä—à–µ–Ω–æ."
                    else:
                        return f"MikroTik *#{mikrotik['name']}* –º–∞—î –∞–∫—Ç—É–∞–ª—å–Ω—É –≤–µ—Ä—Å—ñ—é."
        except Exception as e:
            send_telegram_message(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ #{mikrotik['name']}: {e}")
            return f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ #{mikrotik['name']}."

if __name__ == "__main__":
    send_telegram_message(f"üîπ –†–æ–∑–ø–æ—á–∞—Ç–æ –ø–ª–∞–Ω–æ–≤—ñ –û–Ω–æ–≤–ª–µ–Ω–Ω—è! ({datetime.now().strftime('%Y-%m-%d %H:%M')})")

    failed_mikrotiks = []

    for idx, mikrotik in enumerate(config['mikrotiks'], start=1):
        if attempt_connection(mikrotik):  # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è

                update_message = check_and_update_mikrotik(mikrotik)

                send_telegram_message(f"üîπ #{idx} *#{mikrotik['name']}* ({mikrotik['host']}):\n"
                                      f"‚úÖ{update_message}")
        else:
            failed_mikrotiks.append(mikrotik)
        time.sleep(5)

    # –ü–æ–≤—Ç–æ—Ä–Ω–∞ —Å–ø—Ä–æ–±–∞ –¥–ª—è —Ç–∏—Ö, —Ö—Ç–æ –Ω–µ –ø—ñ–¥–∫–ª—é—á–∏–≤—Å—è
    if failed_mikrotiks:
        send_telegram_message(f"üî¥ –ü–æ–≤—Ç–æ—Ä–Ω—ñ —Å–ø—Ä–æ–±–∏ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ MikroTik, —è–∫—ñ –Ω–µ –≤–¥–∞–ª–∏—Å—è:")
        for mikrotik in failed_mikrotiks:
            send_telegram_message(f"–ü–æ–≤—Ç–æ—Ä–Ω–∞ —Å–ø—Ä–æ–±–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ {mikrotik['host']}...")
            if attempt_connection(mikrotik):
                send_telegram_message(f"‚úÖ –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ {mikrotik['host']} –≤–¥–∞–ª–æ—Å—è –ø—ñ—Å–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ—ó —Å–ø—Ä–æ–±–∏.")
            else:
                send_telegram_message(f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –ø—ñ–¥–∫–ª—é—á–∏—Ç–∏—Å—å –¥–æ {mikrotik['host']} –ø—ñ—Å–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ—ó —Å–ø—Ä–æ–±–∏.")

    send_telegram_message(f"‚úÖ –ó–∞–≤–¥–∞–Ω–Ω—è –≤–∏–∫–æ–Ω–∞–Ω–æ! ({datetime.now().strftime('%Y-%m-%d %H:%M')})")
